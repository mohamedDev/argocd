---
# 1. PersistentVolumeClaim (PVC) pour etcd
# Nécessite un provisionneur de stockage par défaut dans votre cluster (comme celui par défaut dans Rancher Desktop/K3s)
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: etcd-data-pvc
  labels:
    app: etcd-standalone
spec:
  accessModes:
    # ReadWriteOnce est suffisant pour un etcd standalone
    - ReadWriteOnce
  resources:
    requests:
      # Demande 1 Gi de stockage
      storage: 1Gi
  # Si vous avez un StorageClass spécifique, remplacez '' par son nom.
  # Pour Rancher Desktop/K3s, laisser vide utilise la classe par défaut (souvent 'local-path').
  storageClassName: "" 
---
# 2. Déploiement d'etcd (Standalone)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: etcd-standalone
  labels:
    app: etcd-standalone
spec:
  replicas: 1
  selector:
    matchLabels:
      app: etcd-standalone
  template:
    metadata:
      labels:
        app: etcd-standalone
    spec:
      containers:
      - name: etcd
        # Utilisation de l'image officielle Bitnami (version récente)
        image: bitnami/etcd:latest
        imagePullPolicy: IfNotPresent
        env:
          # Configuration minimale pour un etcd standalone
          - name: ALLOW_NONE_AUTHENTICATION
            value: "yes" # ATTENTION: Ceci désactive l'authentification pour la simplicité. À ne pas utiliser en production!
          - name: ETCD_ADVERTISE_CLIENT_URLS
            value: http://etcd-service:2379
          - name: ETCD_LISTEN_CLIENT_URLS
            value: http://0.0.0.0:2379
          # Configuration pour le mode standalone
          - name: ETCD_INITIAL_CLUSTER_TOKEN
            value: etcd-cluster-1
          - name: ETCD_INITIAL_CLUSTER_STATE
            value: new
          - name: ETCD_INITIAL_CLUSTER
            value: etcd-standalone=http://etcd-standalone:2380
          - name: ETCD_INITIAL_ADVERTISE_PEER_URLS
            value: http://etcd-standalone:2380
          - name: ETCD_LISTEN_PEER_URLS
            value: http://0.0.0.0:2380
        ports:
        - containerPort: 2379 # Port client
          name: client
        - containerPort: 2380 # Port peer
          name: peer
        volumeMounts:
          - name: etcd-storage
            mountPath: /bitnami/etcd/data
      volumes:
        - name: etcd-storage
          persistentVolumeClaim:
            claimName: etcd-data-pvc
---
# 3. Service pour etcd (ClusterIP)
apiVersion: v1
kind: Service
metadata:
  name: etcd-service
  labels:
    app: etcd-standalone
spec:
  # ClusterIP est suffisant car seul Adminer y accède dans le cluster
  type: ClusterIP 
  selector:
    app: etcd-standalone
  ports:
    - port: 2379
      targetPort: client
      protocol: TCP
      name: client
---
# 4. Déploiement d'Adminer
apiVersion: apps/v1
kind: Deployment
metadata:
  name: adminer
  labels:
    app: adminer
spec:
  replicas: 1
  selector:
    matchLabels:
      app: adminer
  template:
    metadata:
      labels:
        app: adminer
    spec:
      containers:
      - name: adminer
        # Image officielle Adminer
        image: adminer:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080
          name: http
---
# 5. Service pour Adminer (NodePort pour l'accès externe)
apiVersion: v1
kind: Service
metadata:
  name: adminer-service-nodeport
  labels:
    app: adminer
spec:
  # NodePort expose le service sur un port du nœud, accessible depuis l'extérieur.
  # C'est la méthode la plus simple pour les environnements locaux comme Rancher Desktop.
  type: NodePort 
  selector:
    app: adminer
  ports:
    - port: 8080
      targetPort: http
      # NodePort choisi automatiquement par Kubernetes (entre 30000-32767)
      # Laissez vide pour un choix automatique ou spécifiez un port > 30000