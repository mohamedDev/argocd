apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
        - name: nginx
          image: nginx:latest
          ports:
            - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: nginx-service
spec:
  selector:
    app: nginx
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  type:
    ClusterIP
    # targetPort: 80
    # nodePort: 30007  # Optional: specify a fixed nodePort (range: 30000-32767)
  #type: NodePort

# apiVersion: networking.k8s.io/v1
# kind: Ingress
# metadata:
#   name: demo-ingress
# spec:
#   ingressClassName: traefik # <- tu forces Traefik
#   rules:
#     - host: nginx.local
#       http:
#         paths:
#           - path: /
#             pathType: Prefix
#             backend:
#               service:
#                 name: nginx-service
#                 port:
#                   number: 80
---
# apiVersion: networking.k8s.io/v1
# kind: Ingress
# metadata:
#   name: ingress-nginx
# spec:
#   ingressClassName: apisix
#   rules:
#     - host: nginx.local
#       http:
#         paths:
#           - path: /
#             pathType: Prefix
#             backend:
#               service:
#                 name: nginx-service
#                 port:
#                   number: 80

---
# apiVersion: apisix.apache.org/v2
# kind: ApisixRoute
# metadata:
#   name: demo-route
# spec:
#   http:
#     - name: demo-http
#       match:
#         hosts:
#           - nginx.local
#         paths:
#           - /
#       backend:
#         serviceName: nginx-service
#         servicePort: 80
#       plugins:
#         - name: redirect
#           enable: true
#           config:
#             uri: "https://www.google.com"
#             redirect_code: 302
---
# Route utilisant la configuration rÃ©utilisable
apiVersion: apisix.apache.org/v2
kind: ApisixRoute
metadata:
  name: route-using-plugin-config
spec:
  http:
    - name: demo-http
      match:
        hosts:
          - nginx.local
        paths:
          - /
      backend:
        serviceName: nginx-service
        servicePort: 80
      plugins:
        - name: kafka-logger
          enable: true
          config:
            broker_list:
              - "kafka.kafka-dev.svc.cluster.local:9092"
            kafka_topic: "apisix-logs"
            timeout: 3000
            max_retry_count: 3
            batch_max_size: 50
            inactive_timeout: 5
            include_req_body: true
            include_resp_body: false
