---
# Secret pour les mots de passe
apiVersion: v1
kind: Secret
metadata:
  name: postgres-secret
  
type: Opaque
stringData:
  POSTGRES_PASSWORD: "kong123"
  POSTGRES_USER: "kong"
  POSTGRES_DB: "kong"

---
# PostgreSQL Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  
  labels:
    app: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:11-alpine
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_DB
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_PASSWORD
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - kong
            - -d
            - kong
          initialDelaySeconds: 30
          timeoutSeconds: 5
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - kong
            - -d
            - kong
          initialDelaySeconds: 5
          timeoutSeconds: 1
      volumes:
      - name: postgres-storage
        emptyDir: {}

---
# PostgreSQL Service
apiVersion: v1
kind: Service
metadata:
  name: postgres
  
  labels:
    app: postgres
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432
    protocol: TCP
    name: postgres
  type: ClusterIP

---
# Kong Migration Job
apiVersion: batch/v1
kind: Job
metadata:
  name: kong-migration
  
spec:
  backoffLimit: 5
  template:
    metadata:
      name: kong-migration
    spec:
      restartPolicy: OnFailure
      initContainers:
      - name: wait-for-postgres
        image: postgres:15-alpine
        command:
          - sh
          - -c
          - |
            until pg_isready -h postgres -p 5432 -U kong; do
              echo "Waiting for postgres..."
              sleep 2
            done
        env:
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_PASSWORD
      containers:
      - name: kong-migration
        image: kong:3.5
        env:
        - name: KONG_DATABASE
          value: "postgres"
        - name: KONG_PG_HOST
          value: "postgres"
        - name: KONG_PG_PORT
          value: "5432"
        - name: KONG_PG_USER
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_USER
        - name: KONG_PG_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_PASSWORD
        - name: KONG_PG_DATABASE
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_DB
        command: ["kong", "migrations", "bootstrap"]

---
# Kong ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: kong-config
  
data:
  KONG_DATABASE: "postgres"
  KONG_PG_HOST: "postgres"
  KONG_PG_PORT: "5432"
  KONG_PROXY_ACCESS_LOG: "/dev/stdout"
  KONG_ADMIN_ACCESS_LOG: "/dev/stdout"
  KONG_PROXY_ERROR_LOG: "/dev/stderr"
  KONG_ADMIN_ERROR_LOG: "/dev/stderr"
  KONG_ADMIN_LISTEN: "0.0.0.0:8001"
  KONG_PROXY_LISTEN: "0.0.0.0:8000"
  KONG_ADMIN_GUI_LISTEN: "0.0.0.0:8002"

---
# Kong Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kong
  
  labels:
    app: kong
spec:
  replicas: 2
  selector:
    matchLabels:
      app: kong
  template:
    metadata:
      labels:
        app: kong
    spec:
      containers:
      - name: kong
        image: kong:3.5
        envFrom:
        - configMapRef:
            name: kong-config
        env:
        - name: KONG_PG_USER
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_USER
        - name: KONG_PG_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_PASSWORD
        - name: KONG_PG_DATABASE
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_DB
        ports:
        - name: proxy
          containerPort: 8000
          protocol: TCP
        - name: admin
          containerPort: 8001
          protocol: TCP
        - name: admin-gui
          containerPort: 8002
          protocol: TCP
        - name: proxy-ssl
          containerPort: 8443
          protocol: TCP
        - name: admin-ssl
          containerPort: 8444
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /status
            port: 8001
            scheme: HTTP
          initialDelaySeconds: 30
          timeoutSeconds: 10
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /status
            port: 8001
            scheme: HTTP
          initialDelaySeconds: 30
          timeoutSeconds: 10
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"

---
# Kong Service
apiVersion: v1
kind: Service
metadata:
  name: kong
  
  labels:
    app: kong
spec:
  selector:
    app: kong
  ports:
  - name: proxy
    port: 8000
    targetPort: 8000
    nodePort: 30000
    protocol: TCP
  - name: admin
    port: 8001
    targetPort: 8001
    nodePort: 30001
    protocol: TCP
  - name: admin-gui
    port: 8002
    targetPort: 8002
    nodePort: 30003
    protocol: TCP
  type: NodePort

---
# Konga prepare database job
apiVersion: batch/v1
kind: Job
metadata:
  name: konga-prepare
  
spec:
  backoffLimit: 5
  template:
    metadata:
      name: konga-prepare
    spec:
      restartPolicy: OnFailure
      initContainers:
      - name: wait-for-postgres
        image: postgres:11-alpine
        command:
          - sh
          - -c
          - |
            until pg_isready -h postgres -p 5432 -U kong; do
              echo "Waiting for postgres..."
              sleep 2
            done
            echo "PostgreSQL is ready!"
        env:
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_PASSWORD
      containers:
      - name: konga-prepare
        image: pantsel/konga:0.14.7
        env:
        - name: DB_ADAPTER
          value: "postgres"
        - name: DB_HOST
          value: "postgres"
        - name: DB_PORT
          value: "5432"
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_USER
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_PASSWORD
        - name: DB_DATABASE
          value: "kong"
        command: 
          - sh
          - -c
          - |
            # Wait a bit more for postgres to be fully ready
            sleep 10
            # Prepare konga tables in kong database
            node ./bin/konga.js prepare --adapter postgres --uri postgresql://kong:kong123@postgres:5432/kong

---
# Konga Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: konga
  
  labels:
    app: konga
spec:
  replicas: 1
  selector:
    matchLabels:
      app: konga
  template:
    metadata:
      labels:
        app: konga
    spec:
      initContainers:
      - name: wait-for-konga-prepare
        image: busybox:1.35
        command:
          - sh
          - -c
          - |
            echo "Waiting for konga-prepare job to complete..."
            while ! nslookup postgres.kong-system.svc.cluster.local; do
              echo "Waiting for postgres service..."
              sleep 5
            done
            echo "Postgres is available, waiting a bit more for konga-prepare to complete..."
            sleep 30
      containers:
      - name: konga
        image: pantsel/konga:0.14.1
        env:
        - name: DB_ADAPTER
          value: "postgres"
        - name: DB_HOST
          value: "postgres"
        - name: DB_PORT
          value: "5432"
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_USER
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_PASSWORD
        - name: DB_DATABASE
          value: "kong"
        - name: NODE_ENV
          value: "production"
        - name: KONGA_LOG_LEVEL
          value: "debug"
        ports:
        - name: konga
          containerPort: 1337
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /
            port: 1337
          initialDelaySeconds: 120
          timeoutSeconds: 10
          periodSeconds: 30
          failureThreshold: 10
        readinessProbe:
          httpGet:
            path: /
            port: 1337
          initialDelaySeconds: 90
          timeoutSeconds: 10
          periodSeconds: 10
          failureThreshold: 6
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"

---
# Konga Service
apiVersion: v1
kind: Service
metadata:
  name: konga
  
  labels:
    app: konga
spec:
  selector:
    app: konga
  ports:
  - name: konga
    port: 1337
    targetPort: 1337
    nodePort: 30002
    protocol: TCP
  type: NodePort