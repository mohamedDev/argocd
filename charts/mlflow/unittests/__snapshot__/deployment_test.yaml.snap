should match snapshot of default values:
  1: |
    apiVersion: v1
    data:
      DO_NOT_TRACK: "true"
      MLFLOW_CONFIGURE_LOGGING: "true"
      MLFLOW_DISABLE_TELEMETRY: "true"
      MLFLOW_LOGGING_LEVEL: INFO
    kind: ConfigMap
    metadata:
      labels:
        app: mlflow
        chart: mlflow-1.0.0
        heritage: Helm
        release: mlflow
      name: mlflow-env-configmap
  2: |
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      labels:
        app: mlflow
        app.kubernetes.io/instance: mlflow
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: mlflow
        app.kubernetes.io/version: 1.0.0
        helm.sh/chart: mlflow-1.0.0
        version: 1.0.0
      name: mlflow
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: mlflow
          app.kubernetes.io/instance: mlflow
          app.kubernetes.io/name: mlflow
      strategy:
        rollingUpdate:
          maxSurge: 100%
          maxUnavailable: 0
        type: RollingUpdate
      template:
        metadata:
          annotations:
            checksum/config: 6a1114d91915da5454596d7c7d7f7ae694d835f570534869b7d474e0638ca692
          labels:
            app: mlflow
            app.kubernetes.io/instance: mlflow
            app.kubernetes.io/name: mlflow
        spec:
          containers:
            - args:
                - server
                - --host=0.0.0.0
                - --port=5000
                - '--backend-store-uri=sqlite:///:memory:'
                - --default-artifact-root=./mlruns
                - --gunicorn-opts='--log-level=info'
              command:
                - mlflow
              env:
                - name: MLFLOW_VERSION
                  value: 1.0.0
              envFrom:
                - configMapRef:
                    name: mlflow-env-configmap
                - secretRef:
                    name: mlflow-env-secret
                - secretRef:
                    name: mlflow-flask-server-secret-key
              image: burakince/mlflow:1.0.0
              imagePullPolicy: IfNotPresent
              livenessProbe:
                failureThreshold: 5
                httpGet:
                  path: /health
                  port: mlflow
                initialDelaySeconds: 10
                periodSeconds: 30
                timeoutSeconds: 3
              name: mlflow
              ports:
                - containerPort: 5000
                  name: mlflow
                  protocol: TCP
              readinessProbe:
                failureThreshold: 5
                httpGet:
                  path: /health
                  port: mlflow
                initialDelaySeconds: 10
                periodSeconds: 30
                timeoutSeconds: 3
              resources: {}
              securityContext:
                allowPrivilegeEscalation: false
                capabilities:
                  drop:
                    - ALL
                privileged: false
                readOnlyRootFilesystem: false
                runAsGroup: 1001
                runAsNonRoot: true
                runAsUser: 1001
          securityContext:
            fsGroup: 1001
            fsGroupChangePolicy: OnRootMismatch
          serviceAccountName: mlflow
should match snapshot with additional values:
  1: |
    apiVersion: v1
    data:
      DO_NOT_TRACK: "true"
      MLFLOW_CONFIGURE_LOGGING: "true"
      MLFLOW_DISABLE_TELEMETRY: "true"
      MLFLOW_LOGGING_LEVEL: INFO
      PGDATABASE: test-database
      PGHOST: test-host
      PGPORT: "5432"
    kind: ConfigMap
    metadata:
      labels:
        app: mlflow
        chart: mlflow-1.0.0
        heritage: Helm
        release: mlflow
      name: mlflow-env-configmap
  2: |
    apiVersion: v1
    data:
      migrations.py: |-
        from mlflow.store.db import utils
        import os
        engine = utils.create_sqlalchemy_engine_with_retry("postgresql://")
        utils._initialize_tables(engine)
    kind: ConfigMap
    metadata:
      labels:
        app: mlflow
        chart: mlflow-1.0.0
        heritage: Helm
        release: mlflow
      name: mlflow-migrations
  3: |
    apiVersion: v1
    data:
      dbchecker.sh: |
        #!/bin/sh

        if [[ -z "${PGHOST}" && -z "${MYSQL_HOST}" ]]; then
          HOST="localhost"
        elif [[ -z "${PGHOST}" ]]; then
          HOST="${MYSQL_HOST}"
        else
          HOST="${PGHOST}"
        fi

        if [[ -z "${PGPORT}" && -z "${MYSQL_TCP_PORT}" ]]; then
          PORT="5432"
        elif [[ -z "${PGPORT}" ]]; then
          PORT="${MYSQL_TCP_PORT}"
        else
          PORT="${PGPORT}"
        fi

        COUNT=0

        function fib() {
          if [ $1 -le 0 ]; then
            echo 0
          elif [ $1 -eq 1 ]; then
            echo 1
          else
            echo $(( $(fib $(($1 - 1)) ) + $(fib $(($1 - 2)) ) ))
          fi
        }

        echo "[INFO] Waiting for Database to become ready..."

        until nc -z -w 2 $HOST $PORT; do
          COUNT=$((COUNT + 1));
          SLEEP_TIME=$(fib $COUNT);
          echo "[WARNING] Unable to access database! Sleeping $SLEEP_TIME seconds. Waiting for $HOST to listen on $PORT...";
          sleep $SLEEP_TIME;
        done;

        echo "[INFO] Database OK âœ“"
    kind: ConfigMap
    metadata:
      labels:
        app: mlflow
        chart: mlflow-1.0.0
        heritage: Helm
        release: mlflow
      name: mlflow-dbchecker
  4: |
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      labels:
        app: mlflow
        app.kubernetes.io/instance: mlflow
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: mlflow
        app.kubernetes.io/version: 1.0.0
        helm.sh/chart: mlflow-1.0.0
        version: 1.0.0
      name: mlflow
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: mlflow
          app.kubernetes.io/instance: mlflow
          app.kubernetes.io/name: mlflow
      strategy:
        rollingUpdate:
          maxSurge: 100%
          maxUnavailable: 0
        type: RollingUpdate
      template:
        metadata:
          annotations:
            checksum/config: 7cf756fca80e8aef42d169fa6f6f29599997639b9551fd43b22f2f9c1e04669c
            test-key: test-value
          labels:
            app: mlflow
            app.kubernetes.io/instance: mlflow
            app.kubernetes.io/name: mlflow
            azure.workload.identity/use: "true"
        spec:
          affinity:
            nodeAffinity:
              preferredDuringSchedulingIgnoredDuringExecution:
                - preference:
                    matchExpressions:
                      - key: custom-key
                        operator: In
                        values:
                          - custom-value
                  weight: 1
              requiredDuringSchedulingIgnoredDuringExecution:
                nodeSelectorTerms:
                  - matchExpressions:
                      - key: kubernetes.io/e2e-az-name
                        operator: In
                        values:
                          - e2e-az1
                          - e2e-az2
          containers:
            - args:
                - server
                - --host=0.0.0.0
                - --port=5000
                - --backend-store-uri=postgresql://
                - --default-artifact-root=./mlruns
                - --app-name=basic-auth
                - --gunicorn-opts='--log-level=info'
              command:
                - mlflow
              env:
                - name: MLFLOW_VERSION
                  value: 1.0.0
                - name: MLFLOW_AUTH_CONFIG_PATH
                  value: /etc/mlflow/auth/basic_auth.ini
              envFrom:
                - configMapRef:
                    name: mlflow-env-configmap
                - secretRef:
                    name: mlflow-env-secret
                - secretRef:
                    name: mlflow-flask-server-secret-key
              image: burakince/mlflow:1.0.0
              imagePullPolicy: IfNotPresent
              livenessProbe:
                failureThreshold: 5
                httpGet:
                  path: /health
                  port: mlflow
                initialDelaySeconds: 10
                periodSeconds: 30
                timeoutSeconds: 3
              name: mlflow
              ports:
                - containerPort: 5000
                  name: mlflow
                  protocol: TCP
              readinessProbe:
                failureThreshold: 5
                httpGet:
                  path: /health
                  port: mlflow
                initialDelaySeconds: 10
                periodSeconds: 30
                timeoutSeconds: 3
              resources:
                limits:
                  cpu: 100m
                  memory: 128Mi
                requests:
                  cpu: 100m
                  memory: 128Mi
              securityContext:
                allowPrivilegeEscalation: false
                capabilities:
                  drop:
                    - ALL
                privileged: false
                readOnlyRootFilesystem: false
                runAsGroup: 1001
                runAsNonRoot: true
                runAsUser: 1001
              volumeMounts:
                - mountPath: /etc/mlflow/auth/basic_auth.ini
                  name: ini-file
                  readOnly: true
                  subPath: auth_result.ini
                - mountPath: /mlflow/data
                  name: mlflow-volume
                - mountPath: /example
                  name: example
          initContainers:
            - command:
                - /script/dbchecker.sh
              envFrom:
                - configMapRef:
                    name: mlflow-env-configmap
              image: busybox:1.32
              imagePullPolicy: IfNotPresent
              name: dbchecker
              volumeMounts:
                - mountPath: /script/dbchecker.sh
                  name: dbchecker
                  subPath: dbchecker.sh
            - args:
                - /opt/mlflow/migrations.py
              command:
                - python
              envFrom:
                - configMapRef:
                    name: mlflow-env-configmap
                - secretRef:
                    name: mlflow-env-secret
                - secretRef:
                    name: mlflow-flask-server-secret-key
              image: burakince/mlflow:1.0.0
              imagePullPolicy: IfNotPresent
              name: mlflow-db-migration
              resources:
                limits:
                  cpu: 100m
                  memory: 128Mi
                requests:
                  cpu: 100m
                  memory: 128Mi
              securityContext:
                allowPrivilegeEscalation: false
                capabilities:
                  drop:
                    - ALL
                privileged: false
                readOnlyRootFilesystem: false
                runAsGroup: 1001
                runAsNonRoot: true
                runAsUser: 1001
              volumeMounts:
                - mountPath: /opt/mlflow/migrations.py
                  name: migrations-config
                  readOnly: true
                  subPath: migrations.py
            - args:
                - |
                  sed -e "s/\$(ADMIN_USERNAME_PLACEHOLDER)/${ADMIN_USERNAME}/g" \
                      -e "s/\$(ADMIN_PASSWORD_PLACEHOLDER)/${ADMIN_PASSWORD}/g" \
                      /template/auth_template.ini > /config/auth_result.ini
              command:
                - sh
                - -c
              env:
                - name: ADMIN_USERNAME
                  valueFrom:
                    secretKeyRef:
                      key: username
                      name: mlflow-auth-admin-secret
                - name: ADMIN_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: password
                      name: mlflow-auth-admin-secret
              image: busybox:1.32
              imagePullPolicy: IfNotPresent
              name: ini-file-initializer
              volumeMounts:
                - mountPath: /template
                  name: auth-ini-template-file
                  readOnly: true
                - mountPath: /config
                  name: ini-file
            - image: busybox:1.28
              name: init-myservice
          nodeSelector:
            disktype: ssd
          securityContext:
            fsGroup: 1001
            fsGroupChangePolicy: OnRootMismatch
          serviceAccountName: mlflow
          tolerations:
            - effect: NoSchedule
              key: example-key
              operator: Exists
          volumes:
            - configMap:
                defaultMode: 511
                name: mlflow-dbchecker
              name: dbchecker
            - configMap:
                name: mlflow-migrations
              name: migrations-config
            - emptyDir: {}
              name: ini-file
            - configMap:
                name: mlflow-auth-ini-template
              name: auth-ini-template-file
            - name: mlflow-volume
              persistentVolumeClaim:
                claimName: mlflow-pv-volume
            - configMap:
                name: example
              name: example
should match snapshot with additional values when auth and auth.postgres are enabled:
  1: |
    apiVersion: v1
    data:
      DO_NOT_TRACK: "true"
      MLFLOW_CONFIGURE_LOGGING: "true"
      MLFLOW_DISABLE_TELEMETRY: "true"
      MLFLOW_LOGGING_LEVEL: INFO
      PGDATABASE: test-database
      PGHOST: test-host
      PGPORT: "5432"
    kind: ConfigMap
    metadata:
      labels:
        app: mlflow
        chart: mlflow-1.0.0
        heritage: Helm
        release: mlflow
      name: mlflow-env-configmap
  2: |
    apiVersion: v1
    data:
      migrations.py: |-
        from mlflow.store.db import utils
        import os
        engine = utils.create_sqlalchemy_engine_with_retry("postgresql://")
        utils._initialize_tables(engine)
    kind: ConfigMap
    metadata:
      labels:
        app: mlflow
        chart: mlflow-1.0.0
        heritage: Helm
        release: mlflow
      name: mlflow-migrations
  3: |
    apiVersion: v1
    data:
      dbchecker.sh: |
        #!/bin/sh

        if [[ -z "${PGHOST}" && -z "${MYSQL_HOST}" ]]; then
          HOST="localhost"
        elif [[ -z "${PGHOST}" ]]; then
          HOST="${MYSQL_HOST}"
        else
          HOST="${PGHOST}"
        fi

        if [[ -z "${PGPORT}" && -z "${MYSQL_TCP_PORT}" ]]; then
          PORT="5432"
        elif [[ -z "${PGPORT}" ]]; then
          PORT="${MYSQL_TCP_PORT}"
        else
          PORT="${PGPORT}"
        fi

        COUNT=0

        function fib() {
          if [ $1 -le 0 ]; then
            echo 0
          elif [ $1 -eq 1 ]; then
            echo 1
          else
            echo $(( $(fib $(($1 - 1)) ) + $(fib $(($1 - 2)) ) ))
          fi
        }

        echo "[INFO] Waiting for Database to become ready..."

        until nc -z -w 2 $HOST $PORT; do
          COUNT=$((COUNT + 1));
          SLEEP_TIME=$(fib $COUNT);
          echo "[WARNING] Unable to access database! Sleeping $SLEEP_TIME seconds. Waiting for $HOST to listen on $PORT...";
          sleep $SLEEP_TIME;
        done;

        echo "[INFO] Database OK âœ“"
    kind: ConfigMap
    metadata:
      labels:
        app: mlflow
        chart: mlflow-1.0.0
        heritage: Helm
        release: mlflow
      name: mlflow-dbchecker
  4: |
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      labels:
        app: mlflow
        app.kubernetes.io/instance: mlflow
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: mlflow
        app.kubernetes.io/version: 1.0.0
        helm.sh/chart: mlflow-1.0.0
        version: 1.0.0
      name: mlflow
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: mlflow
          app.kubernetes.io/instance: mlflow
          app.kubernetes.io/name: mlflow
      strategy:
        rollingUpdate:
          maxSurge: 100%
          maxUnavailable: 0
        type: RollingUpdate
      template:
        metadata:
          annotations:
            checksum/config: 7cf756fca80e8aef42d169fa6f6f29599997639b9551fd43b22f2f9c1e04669c
            test-key: test-value
          labels:
            app: mlflow
            app.kubernetes.io/instance: mlflow
            app.kubernetes.io/name: mlflow
            azure.workload.identity/use: "true"
        spec:
          affinity:
            nodeAffinity:
              preferredDuringSchedulingIgnoredDuringExecution:
                - preference:
                    matchExpressions:
                      - key: custom-key
                        operator: In
                        values:
                          - custom-value
                  weight: 1
              requiredDuringSchedulingIgnoredDuringExecution:
                nodeSelectorTerms:
                  - matchExpressions:
                      - key: kubernetes.io/e2e-az-name
                        operator: In
                        values:
                          - e2e-az1
                          - e2e-az2
          containers:
            - args:
                - server
                - --host=0.0.0.0
                - --port=5000
                - --backend-store-uri=postgresql://
                - --default-artifact-root=./mlruns
                - --app-name=basic-auth
                - --gunicorn-opts='--log-level=info'
              command:
                - mlflow
              env:
                - name: MLFLOW_VERSION
                  value: 1.0.0
                - name: MLFLOW_AUTH_CONFIG_PATH
                  value: /etc/mlflow/auth/basic_auth.ini
              envFrom:
                - configMapRef:
                    name: mlflow-env-configmap
                - secretRef:
                    name: mlflow-env-secret
                - secretRef:
                    name: mlflow-flask-server-secret-key
              image: burakince/mlflow:1.0.0
              imagePullPolicy: IfNotPresent
              livenessProbe:
                failureThreshold: 5
                httpGet:
                  path: /health
                  port: mlflow
                initialDelaySeconds: 10
                periodSeconds: 30
                timeoutSeconds: 3
              name: mlflow
              ports:
                - containerPort: 5000
                  name: mlflow
                  protocol: TCP
              readinessProbe:
                failureThreshold: 5
                httpGet:
                  path: /health
                  port: mlflow
                initialDelaySeconds: 10
                periodSeconds: 30
                timeoutSeconds: 3
              resources:
                limits:
                  cpu: 100m
                  memory: 128Mi
                requests:
                  cpu: 100m
                  memory: 128Mi
              securityContext:
                allowPrivilegeEscalation: false
                capabilities:
                  drop:
                    - ALL
                privileged: false
                readOnlyRootFilesystem: false
                runAsGroup: 1001
                runAsNonRoot: true
                runAsUser: 1001
              volumeMounts:
                - mountPath: /etc/mlflow/auth/basic_auth.ini
                  name: ini-file
                  readOnly: true
                  subPath: auth_result.ini
                - mountPath: /mlflow/data
                  name: mlflow-volume
                - mountPath: /example
                  name: example
          initContainers:
            - command:
                - /script/dbchecker.sh
              envFrom:
                - configMapRef:
                    name: mlflow-env-configmap
              image: busybox:1.32
              imagePullPolicy: IfNotPresent
              name: dbchecker
              volumeMounts:
                - mountPath: /script/dbchecker.sh
                  name: dbchecker
                  subPath: dbchecker.sh
            - args:
                - /opt/mlflow/migrations.py
              command:
                - python
              envFrom:
                - configMapRef:
                    name: mlflow-env-configmap
                - secretRef:
                    name: mlflow-env-secret
                - secretRef:
                    name: mlflow-flask-server-secret-key
              image: burakince/mlflow:1.0.0
              imagePullPolicy: IfNotPresent
              name: mlflow-db-migration
              resources:
                limits:
                  cpu: 100m
                  memory: 128Mi
                requests:
                  cpu: 100m
                  memory: 128Mi
              securityContext:
                allowPrivilegeEscalation: false
                capabilities:
                  drop:
                    - ALL
                privileged: false
                readOnlyRootFilesystem: false
                runAsGroup: 1001
                runAsNonRoot: true
                runAsUser: 1001
              volumeMounts:
                - mountPath: /opt/mlflow/migrations.py
                  name: migrations-config
                  readOnly: true
                  subPath: migrations.py
            - args:
                - |
                  sed -e "s/\$(ADMIN_USERNAME_PLACEHOLDER)/${ADMIN_USERNAME}/g" \
                      -e "s/\$(ADMIN_PASSWORD_PLACEHOLDER)/${ADMIN_PASSWORD}/g" \
                      -e "s/\$(POSTGRES_USERNAME_PLACEHOLDER)/${DB_USERNAME}/g" \
                      -e "s/\$(POSTGRES_PASSWORD_PLACEHOLDER)/${DB_PASSWORD}/g" \
                      /template/auth_template.ini > /config/auth_result.ini
              command:
                - sh
                - -c
              env:
                - name: DB_USERNAME
                  valueFrom:
                    secretKeyRef:
                      key: username
                      name: mlflow-auth-pg-secret
                - name: DB_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: password
                      name: mlflow-auth-pg-secret
                - name: ADMIN_USERNAME
                  valueFrom:
                    secretKeyRef:
                      key: username
                      name: mlflow-auth-admin-secret
                - name: ADMIN_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: password
                      name: mlflow-auth-admin-secret
              image: busybox:1.32
              imagePullPolicy: IfNotPresent
              name: ini-file-initializer
              volumeMounts:
                - mountPath: /template
                  name: auth-ini-template-file
                  readOnly: true
                - mountPath: /config
                  name: ini-file
            - image: busybox:1.28
              name: init-myservice
          nodeSelector:
            disktype: ssd
          securityContext:
            fsGroup: 1001
            fsGroupChangePolicy: OnRootMismatch
          serviceAccountName: mlflow
          tolerations:
            - effect: NoSchedule
              key: example-key
              operator: Exists
          volumes:
            - configMap:
                defaultMode: 511
                name: mlflow-dbchecker
              name: dbchecker
            - configMap:
                name: mlflow-migrations
              name: migrations-config
            - emptyDir: {}
              name: ini-file
            - configMap:
                name: mlflow-auth-ini-template
              name: auth-ini-template-file
            - name: mlflow-volume
              persistentVolumeClaim:
                claimName: mlflow-pv-volume
            - configMap:
                name: example
              name: example
should match snapshot with additional values when bitnami mysql is enabled:
  1: |
    apiVersion: v1
    data:
      DO_NOT_TRACK: "true"
      MLFLOW_CONFIGURE_LOGGING: "true"
      MLFLOW_DISABLE_TELEMETRY: "true"
      MLFLOW_LOGGING_LEVEL: INFO
      MYSQL_DATABASE: test-database
      MYSQL_HOST: mlflow-mysql
      MYSQL_TCP_PORT: "3306"
    kind: ConfigMap
    metadata:
      labels:
        app: mlflow
        chart: mlflow-1.0.0
        heritage: Helm
        release: mlflow
      name: mlflow-env-configmap
  2: |
    apiVersion: v1
    data:
      migrations.py: |-
        from mlflow.store.db import utils
        import os
        username = os.getenv("MYSQL_USERNAME")
        password = os.getenv("MYSQL_PWD")
        host = os.getenv("MYSQL_HOST")
        port = os.getenv("MYSQL_TCP_PORT")
        database = os.getenv("MYSQL_DATABASE")
        engine = utils.create_sqlalchemy_engine_with_retry(f"mysql+pymysql://{username}:{password}@{host}:{port}/{database}")
        utils._initialize_tables(engine)
    kind: ConfigMap
    metadata:
      labels:
        app: mlflow
        chart: mlflow-1.0.0
        heritage: Helm
        release: mlflow
      name: mlflow-migrations
  3: |
    apiVersion: v1
    data:
      dbchecker.sh: |
        #!/bin/sh

        if [[ -z "${PGHOST}" && -z "${MYSQL_HOST}" ]]; then
          HOST="localhost"
        elif [[ -z "${PGHOST}" ]]; then
          HOST="${MYSQL_HOST}"
        else
          HOST="${PGHOST}"
        fi

        if [[ -z "${PGPORT}" && -z "${MYSQL_TCP_PORT}" ]]; then
          PORT="5432"
        elif [[ -z "${PGPORT}" ]]; then
          PORT="${MYSQL_TCP_PORT}"
        else
          PORT="${PGPORT}"
        fi

        COUNT=0

        function fib() {
          if [ $1 -le 0 ]; then
            echo 0
          elif [ $1 -eq 1 ]; then
            echo 1
          else
            echo $(( $(fib $(($1 - 1)) ) + $(fib $(($1 - 2)) ) ))
          fi
        }

        echo "[INFO] Waiting for Database to become ready..."

        until nc -z -w 2 $HOST $PORT; do
          COUNT=$((COUNT + 1));
          SLEEP_TIME=$(fib $COUNT);
          echo "[WARNING] Unable to access database! Sleeping $SLEEP_TIME seconds. Waiting for $HOST to listen on $PORT...";
          sleep $SLEEP_TIME;
        done;

        echo "[INFO] Database OK âœ“"
    kind: ConfigMap
    metadata:
      labels:
        app: mlflow
        chart: mlflow-1.0.0
        heritage: Helm
        release: mlflow
      name: mlflow-dbchecker
  4: |
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      labels:
        app: mlflow
        app.kubernetes.io/instance: mlflow
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: mlflow
        app.kubernetes.io/version: 1.0.0
        helm.sh/chart: mlflow-1.0.0
        version: 1.0.0
      name: mlflow
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: mlflow
          app.kubernetes.io/instance: mlflow
          app.kubernetes.io/name: mlflow
      strategy:
        rollingUpdate:
          maxSurge: 100%
          maxUnavailable: 0
        type: RollingUpdate
      template:
        metadata:
          annotations:
            checksum/config: 5826804f40464dfefc92f94053865758e121d600bce4013a3615974cd5427111
            test-key: test-value
          labels:
            app: mlflow
            app.kubernetes.io/instance: mlflow
            app.kubernetes.io/name: mlflow
            azure.workload.identity/use: "true"
        spec:
          affinity:
            nodeAffinity:
              preferredDuringSchedulingIgnoredDuringExecution:
                - preference:
                    matchExpressions:
                      - key: custom-key
                        operator: In
                        values:
                          - custom-value
                  weight: 1
              requiredDuringSchedulingIgnoredDuringExecution:
                nodeSelectorTerms:
                  - matchExpressions:
                      - key: kubernetes.io/e2e-az-name
                        operator: In
                        values:
                          - e2e-az1
                          - e2e-az2
          containers:
            - args:
                - server
                - --host=0.0.0.0
                - --port=5000
                - --backend-store-uri=mysql+pymysql://$(MYSQL_USERNAME):$(MYSQL_PWD)@$(MYSQL_HOST):$(MYSQL_TCP_PORT)/$(MYSQL_DATABASE)
                - --default-artifact-root=./mlruns
                - --app-name=basic-auth
                - --gunicorn-opts='--log-level=info'
              command:
                - mlflow
              env:
                - name: MLFLOW_VERSION
                  value: 1.0.0
                - name: MLFLOW_AUTH_CONFIG_PATH
                  value: /etc/mlflow/auth/basic_auth.ini
                - name: MYSQL_PWD
                  valueFrom:
                    secretKeyRef:
                      key: password
                      name: mlflow-mysql
                      optional: true
              envFrom:
                - configMapRef:
                    name: mlflow-env-configmap
                - secretRef:
                    name: mlflow-env-secret
                - secretRef:
                    name: mlflow-flask-server-secret-key
              image: burakince/mlflow:1.0.0
              imagePullPolicy: IfNotPresent
              livenessProbe:
                failureThreshold: 5
                httpGet:
                  path: /health
                  port: mlflow
                initialDelaySeconds: 10
                periodSeconds: 30
                timeoutSeconds: 3
              name: mlflow
              ports:
                - containerPort: 5000
                  name: mlflow
                  protocol: TCP
              readinessProbe:
                failureThreshold: 5
                httpGet:
                  path: /health
                  port: mlflow
                initialDelaySeconds: 10
                periodSeconds: 30
                timeoutSeconds: 3
              resources:
                limits:
                  cpu: 100m
                  memory: 128Mi
                requests:
                  cpu: 100m
                  memory: 128Mi
              securityContext:
                allowPrivilegeEscalation: false
                capabilities:
                  drop:
                    - ALL
                privileged: false
                readOnlyRootFilesystem: false
                runAsGroup: 1001
                runAsNonRoot: true
                runAsUser: 1001
              volumeMounts:
                - mountPath: /etc/mlflow/auth/basic_auth.ini
                  name: ini-file
                  readOnly: true
                  subPath: auth_result.ini
                - mountPath: /mlflow/data
                  name: mlflow-volume
                - mountPath: /example
                  name: example
          initContainers:
            - command:
                - /script/dbchecker.sh
              env:
                - name: MYSQL_PWD
                  valueFrom:
                    secretKeyRef:
                      key: password
                      name: mlflow-mysql
                      optional: true
              envFrom:
                - configMapRef:
                    name: mlflow-env-configmap
              image: busybox:1.32
              imagePullPolicy: IfNotPresent
              name: dbchecker
              volumeMounts:
                - mountPath: /script/dbchecker.sh
                  name: dbchecker
                  subPath: dbchecker.sh
            - args:
                - /opt/mlflow/migrations.py
              command:
                - python
              env:
                - name: MYSQL_PWD
                  valueFrom:
                    secretKeyRef:
                      key: password
                      name: mlflow-mysql
                      optional: true
              envFrom:
                - configMapRef:
                    name: mlflow-env-configmap
                - secretRef:
                    name: mlflow-env-secret
                - secretRef:
                    name: mlflow-flask-server-secret-key
              image: burakince/mlflow:1.0.0
              imagePullPolicy: IfNotPresent
              name: mlflow-db-migration
              resources:
                limits:
                  cpu: 100m
                  memory: 128Mi
                requests:
                  cpu: 100m
                  memory: 128Mi
              securityContext:
                allowPrivilegeEscalation: false
                capabilities:
                  drop:
                    - ALL
                privileged: false
                readOnlyRootFilesystem: false
                runAsGroup: 1001
                runAsNonRoot: true
                runAsUser: 1001
              volumeMounts:
                - mountPath: /opt/mlflow/migrations.py
                  name: migrations-config
                  readOnly: true
                  subPath: migrations.py
            - args:
                - |
                  sed -e "s/\$(ADMIN_USERNAME_PLACEHOLDER)/${ADMIN_USERNAME}/g" \
                      -e "s/\$(ADMIN_PASSWORD_PLACEHOLDER)/${ADMIN_PASSWORD}/g" \
                      /template/auth_template.ini > /config/auth_result.ini
              command:
                - sh
                - -c
              env:
                - name: ADMIN_USERNAME
                  valueFrom:
                    secretKeyRef:
                      key: username
                      name: mlflow-auth-admin-secret
                - name: ADMIN_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: password
                      name: mlflow-auth-admin-secret
              image: busybox:1.32
              imagePullPolicy: IfNotPresent
              name: ini-file-initializer
              volumeMounts:
                - mountPath: /template
                  name: auth-ini-template-file
                  readOnly: true
                - mountPath: /config
                  name: ini-file
            - image: busybox:1.28
              name: init-myservice
          nodeSelector:
            disktype: ssd
          securityContext:
            fsGroup: 1001
            fsGroupChangePolicy: OnRootMismatch
          serviceAccountName: mlflow
          tolerations:
            - effect: NoSchedule
              key: example-key
              operator: Exists
          volumes:
            - configMap:
                defaultMode: 511
                name: mlflow-dbchecker
              name: dbchecker
            - configMap:
                name: mlflow-migrations
              name: migrations-config
            - emptyDir: {}
              name: ini-file
            - configMap:
                name: mlflow-auth-ini-template
              name: auth-ini-template-file
            - name: mlflow-volume
              persistentVolumeClaim:
                claimName: mlflow-pv-volume
            - configMap:
                name: example
              name: example
should match snapshot with additional values when bitnami postgresql is enabled:
  1: |
    apiVersion: v1
    data:
      DO_NOT_TRACK: "true"
      MLFLOW_CONFIGURE_LOGGING: "true"
      MLFLOW_DISABLE_TELEMETRY: "true"
      MLFLOW_LOGGING_LEVEL: INFO
      PGDATABASE: test-database
      PGHOST: mlflow-postgresql
      PGPORT: "5432"
    kind: ConfigMap
    metadata:
      labels:
        app: mlflow
        chart: mlflow-1.0.0
        heritage: Helm
        release: mlflow
      name: mlflow-env-configmap
  2: |
    apiVersion: v1
    data:
      migrations.py: |-
        from mlflow.store.db import utils
        import os
        engine = utils.create_sqlalchemy_engine_with_retry("postgresql://")
        utils._initialize_tables(engine)
    kind: ConfigMap
    metadata:
      labels:
        app: mlflow
        chart: mlflow-1.0.0
        heritage: Helm
        release: mlflow
      name: mlflow-migrations
  3: |
    apiVersion: v1
    data:
      dbchecker.sh: |
        #!/bin/sh

        if [[ -z "${PGHOST}" && -z "${MYSQL_HOST}" ]]; then
          HOST="localhost"
        elif [[ -z "${PGHOST}" ]]; then
          HOST="${MYSQL_HOST}"
        else
          HOST="${PGHOST}"
        fi

        if [[ -z "${PGPORT}" && -z "${MYSQL_TCP_PORT}" ]]; then
          PORT="5432"
        elif [[ -z "${PGPORT}" ]]; then
          PORT="${MYSQL_TCP_PORT}"
        else
          PORT="${PGPORT}"
        fi

        COUNT=0

        function fib() {
          if [ $1 -le 0 ]; then
            echo 0
          elif [ $1 -eq 1 ]; then
            echo 1
          else
            echo $(( $(fib $(($1 - 1)) ) + $(fib $(($1 - 2)) ) ))
          fi
        }

        echo "[INFO] Waiting for Database to become ready..."

        until nc -z -w 2 $HOST $PORT; do
          COUNT=$((COUNT + 1));
          SLEEP_TIME=$(fib $COUNT);
          echo "[WARNING] Unable to access database! Sleeping $SLEEP_TIME seconds. Waiting for $HOST to listen on $PORT...";
          sleep $SLEEP_TIME;
        done;

        echo "[INFO] Database OK âœ“"
    kind: ConfigMap
    metadata:
      labels:
        app: mlflow
        chart: mlflow-1.0.0
        heritage: Helm
        release: mlflow
      name: mlflow-dbchecker
  4: |
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      labels:
        app: mlflow
        app.kubernetes.io/instance: mlflow
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: mlflow
        app.kubernetes.io/version: 1.0.0
        helm.sh/chart: mlflow-1.0.0
        version: 1.0.0
      name: mlflow
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: mlflow
          app.kubernetes.io/instance: mlflow
          app.kubernetes.io/name: mlflow
      strategy:
        rollingUpdate:
          maxSurge: 100%
          maxUnavailable: 0
        type: RollingUpdate
      template:
        metadata:
          annotations:
            checksum/config: 12f0efcb6b8d7385900db3813272b6b491230a579d255f012186d3ee4d879a05
            test-key: test-value
          labels:
            app: mlflow
            app.kubernetes.io/instance: mlflow
            app.kubernetes.io/name: mlflow
            azure.workload.identity/use: "true"
        spec:
          affinity:
            nodeAffinity:
              preferredDuringSchedulingIgnoredDuringExecution:
                - preference:
                    matchExpressions:
                      - key: custom-key
                        operator: In
                        values:
                          - custom-value
                  weight: 1
              requiredDuringSchedulingIgnoredDuringExecution:
                nodeSelectorTerms:
                  - matchExpressions:
                      - key: kubernetes.io/e2e-az-name
                        operator: In
                        values:
                          - e2e-az1
                          - e2e-az2
          containers:
            - args:
                - server
                - --host=0.0.0.0
                - --port=5000
                - --backend-store-uri=postgresql://
                - --default-artifact-root=./mlruns
                - --app-name=basic-auth
                - --gunicorn-opts='--log-level=info'
              command:
                - mlflow
              env:
                - name: MLFLOW_VERSION
                  value: 1.0.0
                - name: MLFLOW_AUTH_CONFIG_PATH
                  value: /etc/mlflow/auth/basic_auth.ini
                - name: PGPASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: password
                      name: mlflow-postgresql
                      optional: true
              envFrom:
                - configMapRef:
                    name: mlflow-env-configmap
                - secretRef:
                    name: mlflow-env-secret
                - secretRef:
                    name: mlflow-flask-server-secret-key
              image: burakince/mlflow:1.0.0
              imagePullPolicy: IfNotPresent
              livenessProbe:
                failureThreshold: 5
                httpGet:
                  path: /health
                  port: mlflow
                initialDelaySeconds: 10
                periodSeconds: 30
                timeoutSeconds: 3
              name: mlflow
              ports:
                - containerPort: 5000
                  name: mlflow
                  protocol: TCP
              readinessProbe:
                failureThreshold: 5
                httpGet:
                  path: /health
                  port: mlflow
                initialDelaySeconds: 10
                periodSeconds: 30
                timeoutSeconds: 3
              resources:
                limits:
                  cpu: 100m
                  memory: 128Mi
                requests:
                  cpu: 100m
                  memory: 128Mi
              securityContext:
                allowPrivilegeEscalation: false
                capabilities:
                  drop:
                    - ALL
                privileged: false
                readOnlyRootFilesystem: false
                runAsGroup: 1001
                runAsNonRoot: true
                runAsUser: 1001
              volumeMounts:
                - mountPath: /etc/mlflow/auth/basic_auth.ini
                  name: ini-file
                  readOnly: true
                  subPath: auth_result.ini
                - mountPath: /mlflow/data
                  name: mlflow-volume
                - mountPath: /example
                  name: example
          initContainers:
            - command:
                - /script/dbchecker.sh
              env:
                - name: PGPASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: password
                      name: mlflow-postgresql
                      optional: true
              envFrom:
                - configMapRef:
                    name: mlflow-env-configmap
              image: busybox:1.32
              imagePullPolicy: IfNotPresent
              name: dbchecker
              volumeMounts:
                - mountPath: /script/dbchecker.sh
                  name: dbchecker
                  subPath: dbchecker.sh
            - args:
                - /opt/mlflow/migrations.py
              command:
                - python
              env:
                - name: PGPASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: password
                      name: mlflow-postgresql
                      optional: true
              envFrom:
                - configMapRef:
                    name: mlflow-env-configmap
                - secretRef:
                    name: mlflow-env-secret
                - secretRef:
                    name: mlflow-flask-server-secret-key
              image: burakince/mlflow:1.0.0
              imagePullPolicy: IfNotPresent
              name: mlflow-db-migration
              resources:
                limits:
                  cpu: 100m
                  memory: 128Mi
                requests:
                  cpu: 100m
                  memory: 128Mi
              securityContext:
                allowPrivilegeEscalation: false
                capabilities:
                  drop:
                    - ALL
                privileged: false
                readOnlyRootFilesystem: false
                runAsGroup: 1001
                runAsNonRoot: true
                runAsUser: 1001
              volumeMounts:
                - mountPath: /opt/mlflow/migrations.py
                  name: migrations-config
                  readOnly: true
                  subPath: migrations.py
            - args:
                - |
                  sed -e "s/\$(ADMIN_USERNAME_PLACEHOLDER)/${ADMIN_USERNAME}/g" \
                      -e "s/\$(ADMIN_PASSWORD_PLACEHOLDER)/${ADMIN_PASSWORD}/g" \
                      /template/auth_template.ini > /config/auth_result.ini
              command:
                - sh
                - -c
              env:
                - name: ADMIN_USERNAME
                  valueFrom:
                    secretKeyRef:
                      key: username
                      name: mlflow-auth-admin-secret
                - name: ADMIN_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: password
                      name: mlflow-auth-admin-secret
              image: busybox:1.32
              imagePullPolicy: IfNotPresent
              name: ini-file-initializer
              volumeMounts:
                - mountPath: /template
                  name: auth-ini-template-file
                  readOnly: true
                - mountPath: /config
                  name: ini-file
            - image: busybox:1.28
              name: init-myservice
          nodeSelector:
            disktype: ssd
          securityContext:
            fsGroup: 1001
            fsGroupChangePolicy: OnRootMismatch
          serviceAccountName: mlflow
          tolerations:
            - effect: NoSchedule
              key: example-key
              operator: Exists
          volumes:
            - configMap:
                defaultMode: 511
                name: mlflow-dbchecker
              name: dbchecker
            - configMap:
                name: mlflow-migrations
              name: migrations-config
            - emptyDir: {}
              name: ini-file
            - configMap:
                name: mlflow-auth-ini-template
              name: auth-ini-template-file
            - name: mlflow-volume
              persistentVolumeClaim:
                claimName: mlflow-pv-volume
            - configMap:
                name: example
              name: example
should match snapshot with additional values when mysql is enabled:
  1: |
    apiVersion: v1
    data:
      DO_NOT_TRACK: "true"
      MLFLOW_CONFIGURE_LOGGING: "true"
      MLFLOW_DISABLE_TELEMETRY: "true"
      MLFLOW_LOGGING_LEVEL: INFO
      MYSQL_DATABASE: test-database
      MYSQL_HOST: test-host
      MYSQL_TCP_PORT: "3306"
    kind: ConfigMap
    metadata:
      labels:
        app: mlflow
        chart: mlflow-1.0.0
        heritage: Helm
        release: mlflow
      name: mlflow-env-configmap
  2: |
    apiVersion: v1
    data:
      migrations.py: |-
        from mlflow.store.db import utils
        import os
        username = os.getenv("MYSQL_USERNAME")
        password = os.getenv("MYSQL_PWD")
        host = os.getenv("MYSQL_HOST")
        port = os.getenv("MYSQL_TCP_PORT")
        database = os.getenv("MYSQL_DATABASE")
        engine = utils.create_sqlalchemy_engine_with_retry(f"mysql+pymysql://{username}:{password}@{host}:{port}/{database}")
        utils._initialize_tables(engine)
    kind: ConfigMap
    metadata:
      labels:
        app: mlflow
        chart: mlflow-1.0.0
        heritage: Helm
        release: mlflow
      name: mlflow-migrations
  3: |
    apiVersion: v1
    data:
      dbchecker.sh: |
        #!/bin/sh

        if [[ -z "${PGHOST}" && -z "${MYSQL_HOST}" ]]; then
          HOST="localhost"
        elif [[ -z "${PGHOST}" ]]; then
          HOST="${MYSQL_HOST}"
        else
          HOST="${PGHOST}"
        fi

        if [[ -z "${PGPORT}" && -z "${MYSQL_TCP_PORT}" ]]; then
          PORT="5432"
        elif [[ -z "${PGPORT}" ]]; then
          PORT="${MYSQL_TCP_PORT}"
        else
          PORT="${PGPORT}"
        fi

        COUNT=0

        function fib() {
          if [ $1 -le 0 ]; then
            echo 0
          elif [ $1 -eq 1 ]; then
            echo 1
          else
            echo $(( $(fib $(($1 - 1)) ) + $(fib $(($1 - 2)) ) ))
          fi
        }

        echo "[INFO] Waiting for Database to become ready..."

        until nc -z -w 2 $HOST $PORT; do
          COUNT=$((COUNT + 1));
          SLEEP_TIME=$(fib $COUNT);
          echo "[WARNING] Unable to access database! Sleeping $SLEEP_TIME seconds. Waiting for $HOST to listen on $PORT...";
          sleep $SLEEP_TIME;
        done;

        echo "[INFO] Database OK âœ“"
    kind: ConfigMap
    metadata:
      labels:
        app: mlflow
        chart: mlflow-1.0.0
        heritage: Helm
        release: mlflow
      name: mlflow-dbchecker
  4: |
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      labels:
        app: mlflow
        app.kubernetes.io/instance: mlflow
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: mlflow
        app.kubernetes.io/version: 1.0.0
        helm.sh/chart: mlflow-1.0.0
        version: 1.0.0
      name: mlflow
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: mlflow
          app.kubernetes.io/instance: mlflow
          app.kubernetes.io/name: mlflow
      strategy:
        rollingUpdate:
          maxSurge: 100%
          maxUnavailable: 0
        type: RollingUpdate
      template:
        metadata:
          annotations:
            checksum/config: cf97228f92e9e7a556787864ae424f440d546d75ecbed391905f9becb9ec1588
            test-key: test-value
          labels:
            app: mlflow
            app.kubernetes.io/instance: mlflow
            app.kubernetes.io/name: mlflow
            azure.workload.identity/use: "true"
        spec:
          affinity:
            nodeAffinity:
              preferredDuringSchedulingIgnoredDuringExecution:
                - preference:
                    matchExpressions:
                      - key: custom-key
                        operator: In
                        values:
                          - custom-value
                  weight: 1
              requiredDuringSchedulingIgnoredDuringExecution:
                nodeSelectorTerms:
                  - matchExpressions:
                      - key: kubernetes.io/e2e-az-name
                        operator: In
                        values:
                          - e2e-az1
                          - e2e-az2
          containers:
            - args:
                - server
                - --host=0.0.0.0
                - --port=5000
                - --backend-store-uri=mysql+pymysql://$(MYSQL_USERNAME):$(MYSQL_PWD)@$(MYSQL_HOST):$(MYSQL_TCP_PORT)/$(MYSQL_DATABASE)
                - --default-artifact-root=./mlruns
                - --app-name=basic-auth
                - --gunicorn-opts='--log-level=info'
              command:
                - mlflow
              env:
                - name: MLFLOW_VERSION
                  value: 1.0.0
                - name: MLFLOW_AUTH_CONFIG_PATH
                  value: /etc/mlflow/auth/basic_auth.ini
              envFrom:
                - configMapRef:
                    name: mlflow-env-configmap
                - secretRef:
                    name: mlflow-env-secret
                - secretRef:
                    name: mlflow-flask-server-secret-key
              image: burakince/mlflow:1.0.0
              imagePullPolicy: IfNotPresent
              livenessProbe:
                failureThreshold: 5
                httpGet:
                  path: /health
                  port: mlflow
                initialDelaySeconds: 10
                periodSeconds: 30
                timeoutSeconds: 3
              name: mlflow
              ports:
                - containerPort: 5000
                  name: mlflow
                  protocol: TCP
              readinessProbe:
                failureThreshold: 5
                httpGet:
                  path: /health
                  port: mlflow
                initialDelaySeconds: 10
                periodSeconds: 30
                timeoutSeconds: 3
              resources:
                limits:
                  cpu: 100m
                  memory: 128Mi
                requests:
                  cpu: 100m
                  memory: 128Mi
              securityContext:
                allowPrivilegeEscalation: false
                capabilities:
                  drop:
                    - ALL
                privileged: false
                readOnlyRootFilesystem: false
                runAsGroup: 1001
                runAsNonRoot: true
                runAsUser: 1001
              volumeMounts:
                - mountPath: /etc/mlflow/auth/basic_auth.ini
                  name: ini-file
                  readOnly: true
                  subPath: auth_result.ini
                - mountPath: /mlflow/data
                  name: mlflow-volume
                - mountPath: /example
                  name: example
          initContainers:
            - command:
                - /script/dbchecker.sh
              envFrom:
                - configMapRef:
                    name: mlflow-env-configmap
              image: busybox:1.32
              imagePullPolicy: IfNotPresent
              name: dbchecker
              volumeMounts:
                - mountPath: /script/dbchecker.sh
                  name: dbchecker
                  subPath: dbchecker.sh
            - args:
                - /opt/mlflow/migrations.py
              command:
                - python
              envFrom:
                - configMapRef:
                    name: mlflow-env-configmap
                - secretRef:
                    name: mlflow-env-secret
                - secretRef:
                    name: mlflow-flask-server-secret-key
              image: burakince/mlflow:1.0.0
              imagePullPolicy: IfNotPresent
              name: mlflow-db-migration
              resources:
                limits:
                  cpu: 100m
                  memory: 128Mi
                requests:
                  cpu: 100m
                  memory: 128Mi
              securityContext:
                allowPrivilegeEscalation: false
                capabilities:
                  drop:
                    - ALL
                privileged: false
                readOnlyRootFilesystem: false
                runAsGroup: 1001
                runAsNonRoot: true
                runAsUser: 1001
              volumeMounts:
                - mountPath: /opt/mlflow/migrations.py
                  name: migrations-config
                  readOnly: true
                  subPath: migrations.py
            - args:
                - |
                  sed -e "s/\$(ADMIN_USERNAME_PLACEHOLDER)/${ADMIN_USERNAME}/g" \
                      -e "s/\$(ADMIN_PASSWORD_PLACEHOLDER)/${ADMIN_PASSWORD}/g" \
                      /template/auth_template.ini > /config/auth_result.ini
              command:
                - sh
                - -c
              env:
                - name: ADMIN_USERNAME
                  valueFrom:
                    secretKeyRef:
                      key: username
                      name: mlflow-auth-admin-secret
                - name: ADMIN_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: password
                      name: mlflow-auth-admin-secret
              image: busybox:1.32
              imagePullPolicy: IfNotPresent
              name: ini-file-initializer
              volumeMounts:
                - mountPath: /template
                  name: auth-ini-template-file
                  readOnly: true
                - mountPath: /config
                  name: ini-file
            - image: busybox:1.28
              name: init-myservice
          nodeSelector:
            disktype: ssd
          securityContext:
            fsGroup: 1001
            fsGroupChangePolicy: OnRootMismatch
          serviceAccountName: mlflow
          tolerations:
            - effect: NoSchedule
              key: example-key
              operator: Exists
          volumes:
            - configMap:
                defaultMode: 511
                name: mlflow-dbchecker
              name: dbchecker
            - configMap:
                name: mlflow-migrations
              name: migrations-config
            - emptyDir: {}
              name: ini-file
            - configMap:
                name: mlflow-auth-ini-template
              name: auth-ini-template-file
            - name: mlflow-volume
              persistentVolumeClaim:
                claimName: mlflow-pv-volume
            - configMap:
                name: example
              name: example
should match snapshot with additional values when postgresql is enabled:
  1: |
    apiVersion: v1
    data:
      DO_NOT_TRACK: "true"
      MLFLOW_CONFIGURE_LOGGING: "true"
      MLFLOW_DISABLE_TELEMETRY: "true"
      MLFLOW_LOGGING_LEVEL: INFO
      PGDATABASE: test-database
      PGHOST: test-host
      PGPORT: "5432"
    kind: ConfigMap
    metadata:
      labels:
        app: mlflow
        chart: mlflow-1.0.0
        heritage: Helm
        release: mlflow
      name: mlflow-env-configmap
  2: |
    apiVersion: v1
    data:
      migrations.py: |-
        from mlflow.store.db import utils
        import os
        engine = utils.create_sqlalchemy_engine_with_retry("postgresql://")
        utils._initialize_tables(engine)
    kind: ConfigMap
    metadata:
      labels:
        app: mlflow
        chart: mlflow-1.0.0
        heritage: Helm
        release: mlflow
      name: mlflow-migrations
  3: |
    apiVersion: v1
    data:
      dbchecker.sh: |
        #!/bin/sh

        if [[ -z "${PGHOST}" && -z "${MYSQL_HOST}" ]]; then
          HOST="localhost"
        elif [[ -z "${PGHOST}" ]]; then
          HOST="${MYSQL_HOST}"
        else
          HOST="${PGHOST}"
        fi

        if [[ -z "${PGPORT}" && -z "${MYSQL_TCP_PORT}" ]]; then
          PORT="5432"
        elif [[ -z "${PGPORT}" ]]; then
          PORT="${MYSQL_TCP_PORT}"
        else
          PORT="${PGPORT}"
        fi

        COUNT=0

        function fib() {
          if [ $1 -le 0 ]; then
            echo 0
          elif [ $1 -eq 1 ]; then
            echo 1
          else
            echo $(( $(fib $(($1 - 1)) ) + $(fib $(($1 - 2)) ) ))
          fi
        }

        echo "[INFO] Waiting for Database to become ready..."

        until nc -z -w 2 $HOST $PORT; do
          COUNT=$((COUNT + 1));
          SLEEP_TIME=$(fib $COUNT);
          echo "[WARNING] Unable to access database! Sleeping $SLEEP_TIME seconds. Waiting for $HOST to listen on $PORT...";
          sleep $SLEEP_TIME;
        done;

        echo "[INFO] Database OK âœ“"
    kind: ConfigMap
    metadata:
      labels:
        app: mlflow
        chart: mlflow-1.0.0
        heritage: Helm
        release: mlflow
      name: mlflow-dbchecker
  4: |
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      labels:
        app: mlflow
        app.kubernetes.io/instance: mlflow
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: mlflow
        app.kubernetes.io/version: 1.0.0
        helm.sh/chart: mlflow-1.0.0
        version: 1.0.0
      name: mlflow
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: mlflow
          app.kubernetes.io/instance: mlflow
          app.kubernetes.io/name: mlflow
      strategy:
        rollingUpdate:
          maxSurge: 100%
          maxUnavailable: 0
        type: RollingUpdate
      template:
        metadata:
          annotations:
            checksum/config: 7cf756fca80e8aef42d169fa6f6f29599997639b9551fd43b22f2f9c1e04669c
            test-key: test-value
          labels:
            app: mlflow
            app.kubernetes.io/instance: mlflow
            app.kubernetes.io/name: mlflow
            azure.workload.identity/use: "true"
        spec:
          affinity:
            nodeAffinity:
              preferredDuringSchedulingIgnoredDuringExecution:
                - preference:
                    matchExpressions:
                      - key: custom-key
                        operator: In
                        values:
                          - custom-value
                  weight: 1
              requiredDuringSchedulingIgnoredDuringExecution:
                nodeSelectorTerms:
                  - matchExpressions:
                      - key: kubernetes.io/e2e-az-name
                        operator: In
                        values:
                          - e2e-az1
                          - e2e-az2
          containers:
            - args:
                - server
                - --host=0.0.0.0
                - --port=5000
                - --backend-store-uri=postgresql://
                - --default-artifact-root=./mlruns
                - --app-name=basic-auth
                - --gunicorn-opts='--log-level=info'
              command:
                - mlflow
              env:
                - name: MLFLOW_VERSION
                  value: 1.0.0
                - name: MLFLOW_AUTH_CONFIG_PATH
                  value: /etc/mlflow/auth/basic_auth.ini
              envFrom:
                - configMapRef:
                    name: mlflow-env-configmap
                - secretRef:
                    name: mlflow-env-secret
                - secretRef:
                    name: mlflow-flask-server-secret-key
              image: burakince/mlflow:1.0.0
              imagePullPolicy: IfNotPresent
              livenessProbe:
                failureThreshold: 5
                httpGet:
                  path: /health
                  port: mlflow
                initialDelaySeconds: 10
                periodSeconds: 30
                timeoutSeconds: 3
              name: mlflow
              ports:
                - containerPort: 5000
                  name: mlflow
                  protocol: TCP
              readinessProbe:
                failureThreshold: 5
                httpGet:
                  path: /health
                  port: mlflow
                initialDelaySeconds: 10
                periodSeconds: 30
                timeoutSeconds: 3
              resources:
                limits:
                  cpu: 100m
                  memory: 128Mi
                requests:
                  cpu: 100m
                  memory: 128Mi
              securityContext:
                allowPrivilegeEscalation: false
                capabilities:
                  drop:
                    - ALL
                privileged: false
                readOnlyRootFilesystem: false
                runAsGroup: 1001
                runAsNonRoot: true
                runAsUser: 1001
              volumeMounts:
                - mountPath: /etc/mlflow/auth/basic_auth.ini
                  name: ini-file
                  readOnly: true
                  subPath: auth_result.ini
                - mountPath: /mlflow/data
                  name: mlflow-volume
                - mountPath: /example
                  name: example
          initContainers:
            - command:
                - /script/dbchecker.sh
              envFrom:
                - configMapRef:
                    name: mlflow-env-configmap
              image: busybox:1.32
              imagePullPolicy: IfNotPresent
              name: dbchecker
              volumeMounts:
                - mountPath: /script/dbchecker.sh
                  name: dbchecker
                  subPath: dbchecker.sh
            - args:
                - /opt/mlflow/migrations.py
              command:
                - python
              envFrom:
                - configMapRef:
                    name: mlflow-env-configmap
                - secretRef:
                    name: mlflow-env-secret
                - secretRef:
                    name: mlflow-flask-server-secret-key
              image: burakince/mlflow:1.0.0
              imagePullPolicy: IfNotPresent
              name: mlflow-db-migration
              resources:
                limits:
                  cpu: 100m
                  memory: 128Mi
                requests:
                  cpu: 100m
                  memory: 128Mi
              securityContext:
                allowPrivilegeEscalation: false
                capabilities:
                  drop:
                    - ALL
                privileged: false
                readOnlyRootFilesystem: false
                runAsGroup: 1001
                runAsNonRoot: true
                runAsUser: 1001
              volumeMounts:
                - mountPath: /opt/mlflow/migrations.py
                  name: migrations-config
                  readOnly: true
                  subPath: migrations.py
            - args:
                - |
                  sed -e "s/\$(ADMIN_USERNAME_PLACEHOLDER)/${ADMIN_USERNAME}/g" \
                      -e "s/\$(ADMIN_PASSWORD_PLACEHOLDER)/${ADMIN_PASSWORD}/g" \
                      /template/auth_template.ini > /config/auth_result.ini
              command:
                - sh
                - -c
              env:
                - name: ADMIN_USERNAME
                  valueFrom:
                    secretKeyRef:
                      key: username
                      name: mlflow-auth-admin-secret
                - name: ADMIN_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: password
                      name: mlflow-auth-admin-secret
              image: busybox:1.32
              imagePullPolicy: IfNotPresent
              name: ini-file-initializer
              volumeMounts:
                - mountPath: /template
                  name: auth-ini-template-file
                  readOnly: true
                - mountPath: /config
                  name: ini-file
            - image: busybox:1.28
              name: init-myservice
          nodeSelector:
            disktype: ssd
          securityContext:
            fsGroup: 1001
            fsGroupChangePolicy: OnRootMismatch
          serviceAccountName: mlflow
          tolerations:
            - effect: NoSchedule
              key: example-key
              operator: Exists
          volumes:
            - configMap:
                defaultMode: 511
                name: mlflow-dbchecker
              name: dbchecker
            - configMap:
                name: mlflow-migrations
              name: migrations-config
            - emptyDir: {}
              name: ini-file
            - configMap:
                name: mlflow-auth-ini-template
              name: auth-ini-template-file
            - name: mlflow-volume
              persistentVolumeClaim:
                claimName: mlflow-pv-volume
            - configMap:
                name: example
              name: example
